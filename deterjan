/*
Deterjan Üretim Yönetimi - Tek Dosya Uygulama (Frontend + Backend örneği)

Bu dosya bir React bileşeni olarak ön uç (UI) sunar ve aynı zamanda arka uç, veritabanı ve e-posta örneklerinin nasıl kurulacağını açıklayan bölümler içerir.

Kullanım:
- Ön uç: Bu bileşen bir dashboard gösterir; formüller girilir, üretim adımları belirlenir, üretim kaydı oluşturulur ve API'ye gönderilir.
- Arka uç: Aşağıdaki notlarda Express + PostgreSQL + Nodemailer örneği vardır. Bunları kendi sunucunuzda /api/* yolları ile kurun.

Özellikler (tasarım):
- Kullanıcı bazlı formül oluşturma / düzenleme
- Üretim sırası (adım adım) girilebilme
- Üretim kaydı oluşturma ve veritabanına kayıt
- Üretilen ürün bilgisinin e-posta ile gönderilmesi
- Basit doğrulama, işlem kayıtları (audit log)

Güvenlik/operasyon notları:
- Kimlik doğrulama (JWT veya session) zorunludur.
- Üretim ve formül verileri için rol tabanlı erişim (ör. operator, kalite, admin)
- Hassas veriler (tarif veya güvenlik) şifrelenebilir.

Aşağıda ön uç bileşeni, ardından arka uç ve veritabanı örnekleri bulunur.
*/

import React, { useState, useEffect } from "react";

export default function DetergentDashboard() {
  const [user, setUser] = useState({ id: "user-1", name: "Operatör A" });
  const [formulas, setFormulas] = useState([]);
  const [productionList, setProductionList] = useState([]);
  const [loading, setLoading] = useState(false);

  // Form state
  const [formulaName, setFormulaName] = useState("");
  const [ingredients, setIngredients] = useState([
    { name: "Sodyum Lauril Sülfat", percent: 0 },
  ]);
  const [sequence, setSequence] = useState(["Karıştırma", "Isıtma", "Soğutma"]);

  // Production run state
  const [runQty, setRunQty] = useState(100);
  const [selectedFormulaId, setSelectedFormulaId] = useState(null);

  useEffect(() => {
    // örnek veriler
    setFormulas([
      { id: "f-1", name: "Sıvı Deterjan - Basit", ingredients: [{ name: "SLES", percent: 15 }, { name: "Su", percent: 70 }], sequence: ["Karıştırma", "PH düzeltme", "Dolum"] },
    ]);

    setProductionList([]);
  }, []);

  function addIngredient() {
    setIngredients([...ingredients, { name: "", percent: 0 }]);
  }
  function removeIngredient(i) {
    setIngredients(ingredients.filter((_, idx) => idx !== i));
  }
  function updateIngredient(i, field, value) {
    const copy = [...ingredients];
    copy[i][field] = field === "percent" ? Number(value) : value;
    setIngredients(copy);
  }

  function addSequenceStep() {
    setSequence([...sequence, "Yeni Adım"]);
  }
  function updateSequence(i, value) {
    const copy = [...sequence];
    copy[i] = value;
    setSequence(copy);
  }
  function removeSequence(i) {
    setSequence(sequence.filter((_, idx) => idx !== i));
  }

  // Kaydet formula
  async function saveFormula() {
    // Basit ön doğrulama
    const total = ingredients.reduce((s, it) => s + Number(it.percent || 0), 0);
    if (!formulaName) return alert("Formül ismi girin");
    if (total <= 0) return alert("İçerik yüzdelerini girin");

    const payload = {
      name: formulaName,
      ingredients,
      sequence,
      createdBy: user.id,
    };

    // Gerçek uygulamada POST /api/formulas
    // const res = await fetch('/api/formulas', { method: 'POST', body: JSON.stringify(payload) })
    // const saved = await res.json();

    // UI tarafında örnek ID ile kaydet
    const saved = { ...payload, id: "f-" + Math.random().toString(36).slice(2, 9) };
    setFormulas(prev => [saved, ...prev]);
    setFormulaName("");
    setIngredients([{ name: "Sodyum Lauril Sülfat", percent: 10 }]);
    setSequence(["Karıştırma"]);
  }

  // Üretim kaydı oluştur
  async function createProductionRun() {
    if (!selectedFormulaId) return alert("Üretimde kullanılacak formülü seçin");
    setLoading(true);
    const formula = formulas.find(f => f.id === selectedFormulaId);
    if (!formula) return alert("Formül bulunamadı");

    const runRecord = {
      id: "run-" + Math.random().toString(36).slice(2, 9),
      formulaId: formula.id,
      formulaName: formula.name,
      quantity: Number(runQty),
      sequence: formula.sequence,
      ingredients: formula.ingredients,
      producedBy: user.id,
      producedAt: new Date().toISOString(),
      status: "Tamamlandı",
    };

    // Gerçek uygulamada POST /api/produce
    // await fetch('/api/produce', { method: 'POST', body: JSON.stringify(runRecord) })

    // UI'ya ekle
    setProductionList(prev => [runRecord, ...prev]);
    setLoading(false);

    // E-posta gönderme isteği (backend'e)
    // await fetch('/api/send-email', {method:'POST', body: JSON.stringify({runId: runRecord.id})})
    alert('Üretim kaydı oluşturuldu ve e-posta gönderme çağrısı yapıldı (backend implementasyonu gerekli).');
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <header className="mb-6">
        <h1 className="text-2xl font-bold">Deterjan Üretim Yönetimi</h1>
        <p className="text-sm text-gray-600">Kullanıcı: {user.name} — Rol: Operatör</p>
      </header>

      <main className="grid grid-cols-3 gap-6">
        {/* Sol: Formül oluşturma */}
        <section className="col-span-1 bg-white p-4 rounded-2xl shadow">
          <h2 className="text-lg font-semibold mb-2">Formül Oluştur / Kaydet</h2>
          <label className="block text-sm">Formül Adı</label>
          <input value={formulaName} onChange={e => setFormulaName(e.target.value)} className="w-full p-2 border rounded mb-3" placeholder="Örn: Konsantre Sıvı A" />

          <div className="mb-3">
            <h3 className="font-medium">İçerikler</h3>
            {ingredients.map((it, i) => (
              <div key={i} className="flex gap-2 mt-2">
                <input value={it.name} onChange={e => updateIngredient(i, 'name', e.target.value)} className="flex-1 p-2 border rounded" placeholder="Madde adı" />
                <input value={it.percent} onChange={e => updateIngredient(i, 'percent', e.target.value)} className="w-24 p-2 border rounded" placeholder="%" />
                <button onClick={() => removeIngredient(i)} className="px-2 rounded bg-red-100">Sil</button>
              </div>
            ))}
            <div className="mt-2">
              <button onClick={addIngredient} className="px-3 py-1 rounded bg-blue-100">Yeni içerik ekle</button>
            </div>
          </div>

          <div className="mb-3">
            <h3 className="font-medium">Üretim Sırası (Adımlar)</h3>
            {sequence.map((s, i) => (
              <div key={i} className="flex gap-2 mt-2">
                <input value={s} onChange={e => updateSequence(i, e.target.value)} className="flex-1 p-2 border rounded" />
                <button onClick={() => removeSequence(i)} className="px-2 rounded bg-red-100">Sil</button>
              </div>
            ))}
            <div className="mt-2">
              <button onClick={addSequenceStep} className="px-3 py-1 rounded bg-blue-100">Adım ekle</button>
            </div>
          </div>

          <div className="flex gap-2">
            <button onClick={saveFormula} className="px-4 py-2 rounded bg-green-500 text-white">Formülü Kaydet</button>
          </div>
        </section>

        {/* Orta: Üretim başlatma */}
        <section className="col-span-1 bg-white p-4 rounded-2xl shadow">
          <h2 className="text-lg font-semibold mb-2">Üretim Başlat</h2>
          <label className="block text-sm">Formül Seç</label>
          <select className="w-full p-2 border rounded mb-3" value={selectedFormulaId || ""} onChange={e => setSelectedFormulaId(e.target.value)}>
            <option value="">-- Seçiniz --</option>
            {formulas.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}
          </select>

          <label className="block text-sm">Miktar (kg veya L)</label>
          <input type="number" value={runQty} onChange={e => setRunQty(e.target.value)} className="w-full p-2 border rounded mb-3" />

          <div className="flex gap-2">
            <button onClick={createProductionRun} className="px-4 py-2 rounded bg-indigo-500 text-white" disabled={loading}>{loading ? 'Kaydediliyor...' : 'Üretimi Kaydet & E-posta Gönder'}</button>
          </div>

          <div className="mt-4">
            <h3 className="font-medium">Notlar</h3>
            <ul className="list-disc ml-5 text-sm text-gray-600">
              <li>Her üretim kaydı arka uçta doğrulanmalı ve barkod/lot numarası üretilmeli.</li>
              <li>Kalite kontrol sonucu eklenecek alanlar (pH, viskozite, yoğunluk) olmalı.</li>
            </ul>
          </div>
        </section>

        {/* Sağ: Üretim listesi */}
        <section className="col-span-1 bg-white p-4 rounded-2xl shadow overflow-auto max-h-[640px]">
          <h2 className="text-lg font-semibold mb-2">Son Üretimler</h2>
          <table className="w-full text-sm">
            <thead>
              <tr className="text-left text-gray-600">
                <th>Üretim ID</th>
                <th>Formül</th>
                <th>Miktar</th>
                <th>Tarih</th>
                <th>Durum</th>
              </tr>
            </thead>
            <tbody>
              {productionList.map(p => (
                <tr key={p.id} className="border-t">
                  <td className="py-2">{p.id}</td>
                  <td>{p.formulaName}</td>
                  <td>{p.quantity}</td>
                  <td>{new Date(p.producedAt).toLocaleString()}</td>
                  <td>{p.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>
      </main>

      <footer className="mt-6 text-xs text-gray-500">Not: Bu örnek frontend, gerçek üretim sistemlerinde arka uç validasyonları, roller ve izleme gereklidir.</footer>
    </div>
  );
}

/*
---------------------------------------------
ARKA UÇ ÖRNEK (Node.js / Express) - Özet
---------------------------------------------
Aşağıdaki kod parçalarını backend sunucunuza ekleyin (örnek: app.js).

// package.json örnek bağımlılıklar:
// express, pg, nodemailer, jsonwebtoken, bcrypt, express-validator, dotenv

// Express temel
const express = require('express');
const app = express();
app.use(express.json());

// DB (pg kullanarak)
// const { Pool } = require('pg');
// const pool = new Pool({ connectionString: process.env.DATABASE_URL });

// Formül kaydetme
app.post('/api/formulas', async (req, res) => {
  // doğrulama: name, ingredients array, sequence array
  // SQL: INSERT INTO formulas (id, name, ingredients_json, sequence_json, created_by, created_at) VALUES
});

// Üretim kaydı
app.post('/api/produce', async (req, res) => {
  // body: formulaId, quantity, producedBy
  // 1) formülü çek, 2) lot numarası oluştur: e.g. "LOT-YYYYMMDD-XXXX"
  // 3) INSERT INTO productions ... RETURNING *
  // 4) Aşağıda e-posta fonksiyonunu çağırabilirsiniz
});

// E-posta gönderme (Nodemailer)
// const nodemailer = require('nodemailer');
// async function sendProductionEmail(to, productionRecord) { ... }

app.listen(3001, ()=> console.log('API running'));

---------------------------------------------
VERİTABANI (PostgreSQL) - Örnek Şema
---------------------------------------------
-- formulas
CREATE TABLE formulas (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  ingredients JSONB NOT NULL,
  sequence JSONB NOT NULL,
  created_by TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- productions
CREATE TABLE productions (
  id TEXT PRIMARY KEY,
  formula_id TEXT REFERENCES formulas(id),
  formula_snapshot JSONB NOT NULL,
  quantity NUMERIC NOT NULL,
  lot_number TEXT UNIQUE,
  produced_by TEXT,
  produced_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  qc JSONB, -- kalite kontrol sonuçları
  status TEXT
);

-- users
CREATE TABLE users (
  id TEXT PRIMARY KEY,
  name TEXT,
  email TEXT,
  password_hash TEXT,
  role TEXT
);

-- audit log
CREATE TABLE audit_logs (
  id SERIAL PRIMARY KEY,
  entity_type TEXT,
  entity_id TEXT,
  action TEXT,
  performed_by TEXT,
  payload JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

---------------------------------------------
E-POSTA ŞABLONU (Basit)
---------------------------------------------
Subject: Üretim Tamamlandı - {lot_number} - {formula_name}

Body (HTML):
<h2>Üretim Bilgisi</h2>
<ul>
  <li>Lot: {lot_number}</li>
  <li>Formül: {formula_name}</li>
  <li>Miktar: {quantity}</li>
  <li>Tarih: {produced_at}</li>
</ul>
<p>Detaylar ektedir veya sistemde görüntülenebilir.</p>

Nodemailer örnek (kısa):
const transporter = nodemailer.createTransport({ host: process.env.SMTP_HOST, port: Number(process.env.SMTP_PORT), auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS }});
await transporter.sendMail({ from: 'fab@noreply.com', to: 'qc@firma.com', subject, html: htmlBody });

---------------------------------------------
API Özet (REST)
---------------------------------------------
POST /api/auth/login  => {token}
GET  /api/formulas     => list
POST /api/formulas     => create
GET  /api/formulas/:id => get
POST /api/produce      => create production run (returns production record)
POST /api/productions/:id/email => trigger email for production
GET  /api/productions  => list productions (filter by date, formula, lot)

---------------------------------------------
UI iş akışı önerisi
---------------------------------------------
1) Kullanıcı sisteme giriş yapar (JWT alır).
2) Formül (reçete) eklenir veya seçilir.
3) Üretim için miktar girilir ve "Üretimi Kaydet" tuşuna basılır.
4) Backend formülü kopyalar (snapshot), lot numarası üretir, veritabanına kaydeder.
5) Backend mail gönderir ve üretimi loglar.
6) Üretim listesi ve QC sonuçları dashboard'da görüntülenir.

---------------------------------------------
Dağıtım / Operasyon Notları
---------------------------------------------
- Yedekleme: Veritabanı yedekleri günlük.
- İzleme: Her /api/produce çağrısı bir audit log kaydı oluşturmalı.
- Güvenlik: Formüller hassas olabilir; şifreleme ve erişim kontrolü uygulanmalı.

*/
